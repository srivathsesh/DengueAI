mutate(mdlResult = invoke_map(model,params))
LinerFitResults <- ModelResults %>% map(.x = .$mdlResult, .f = ~glance(.x))
ModelResults
ModelResults$x
ModelResults$x[[1]]
LinerFitResults <- ModelResults %>% map(.x = .$mdlResult, .f = ~glance(.x))
LinerFitResults
start_up <- pmap(inputlist,windowdraw) %>% tibble(.)
start_up$Pred = pmap(start_up,.f = function(.x) x.train[.x,])
start_up$y <- map(start_up$.,.f = function(.x) y[.x,])
start_up$yBoxCox <- map(start_up$.,.f = function(.x) y.boxcox[.x,])
start_up %<>% mutate(varnames = rep(list(c('reanalysis_relative_humidity_percent','reanalysis_precip_amt_kg_per_m2','reanalysis_max_air_temp_k',"ndvi_ne","ndvi_nw","ndvi_se","ndvi_sw",'y')),5)) %>%
mutate(lags = rep(list(c(8,8,4,4,4,4,4,1)),5))
model_list <- list(Mdl = dynfit)
ModelFrame <- enframe(rep(model_list,5),name = 'modelname',value = 'model')
ModelResults <- start_up %>% select(-1,-3) %>%
`colnames<-`(c('x','y','varnames','lags')) %>%
mutate(params = pmap(.,function(x,y,varnames,lags){
list(x = x, y = y, varnames = varnames, lags = lags)
}))
ModelResults %<>% bind_cols(.,ModelFrame) %>%
mutate(mdlResult = invoke_map(model,params))
LinerFitResults <- ModelResults %>% map(.x = .$mdlResult, .f = ~glance(.x))
LinerFitResults
getnewdata <-  function(x,y,currentTime){
start <- time(head(x,1))
end <- currentTime + 1
newdata = zooreg(cbind(x = x[1:end,], y = y[1:end,]),order.by = time(y[1:313,]))
#newdata = zooreg(cbind(x = window(x,start = start, end = end),y = window(y,start = start, end = end)), start = start, end = end )
#list2env(data.frame(newdata),.GlobalEnv)
return(newdata)
}
statrtTime <- as.Date('1990-04-30')
currentTime <- as.Date('1996-04-29')
oneaheadForecast <- function (x,y,currentTime,model){
newdata <- getnewdata(x,y,currentTime)
prediction <- predict(model,newdata)
tail(prediction$mean,1)
}
MakePredictions <- function(x, y, currentTime, model, until) {
browser()
# predictions <-window(y, start = '1990-04-30', end = currentTime)
# predictions <- rbind.zoo(coredata(predictions), rep(NA,ceiling(difftime(strptime(until,"%Y-%m-%d"),strptime(currentTime + 1, "%Y-%m-%d"),units ='weeks'))))
#predictions <- zoo(predictions,order.by = time(window(x,start = '1990-04-30', end = until)))
#startindex = which(index(y)==currentTime) + 1
future = currentTime + 1
y[future : nrow(y),] <- NA
while (future <= until) {
oneaheadPred <- oneaheadForecast(x,y, currentTime, model)
currentTime <- currentTime + 1
y[currentTime,1] <- oneaheadPred
}
return(predictions)
}
fct <- MakePredictions(x.train,y.boxcox,currentTime = 312,model = mdl1,420)
model
ModelResults$model[[1]]
ModelResults$mdlResult[[1]]
mdl1 <- ModelResults$mdlResult[[1]]
fct <- MakePredictions(x.train,y.boxcox,currentTime = 312,model = ModelResults$mdlResult[[1]],420)
source('~/Documents/MSPA/PREDICT 413/DengAI/dynfit.R')
ModelResults %<>% bind_cols(.,ModelFrame) %>%
mutate(mdlResult = invoke_map(model,params))
y
paste0('dyn$lm(total_cases ~',paste0('stats::lag(',varnames,',',-lags,')',collapse = '+'),')')
dyn$lm(y ~stats::lag(reanalysis_relative_humidity_percent,-8)+stats::lag(reanalysis_precip_amt_kg_per_m2,-8)+stats::lag(reanalysis_max_air_temp_k,-4)+stats::lag(ndvi_ne,-4)+stats::lag(ndvi_nw,-4)+stats::lag(ndvi_se,-4)+stats::lag(ndvi_sw,-4)+stats::lag(y,-1))
stats::lag(y,-1)
stats::lag(y$total_cases,-1)
source('~/Documents/MSPA/PREDICT 413/DengAI/dynfit.R')
inputlist <- data.frame(starts = c(1,52*3, 52*6, 52*9,52*12),
ends = c(52*6, 9*52, 12*52, 52*15,52*18))
windowdraw <- function(starts,ends,data = index(x.train)){
window(data,start = starts, end = ends)
}
start_up <- pmap(inputlist,windowdraw) %>% tibble(.)
start_up$Pred = pmap(start_up,.f = function(.x) x.train[.x,])
start_up$y <- map(start_up$.,.f = function(.x) y[.x,])
start_up$yBoxCox <- map(start_up$.,.f = function(.x) y.boxcox[.x,])
start_up %<>% mutate(varnames = rep(list(c('reanalysis_relative_humidity_percent','reanalysis_precip_amt_kg_per_m2','reanalysis_max_air_temp_k',"ndvi_ne","ndvi_nw","ndvi_se","ndvi_sw",'y')),5)) %>%
mutate(lags = rep(list(c(8,8,4,4,4,4,4,1)),5))
model_list <- list(Mdl = dynfit)
source('~/Documents/MSPA/PREDICT 413/DengAI/dynfit.R')
start_up <- pmap(inputlist,windowdraw) %>% tibble(.)
start_up$Pred = pmap(start_up,.f = function(.x) x.train[.x,])
start_up$y <- map(start_up$.,.f = function(.x) y[.x,])
start_up$yBoxCox <- map(start_up$.,.f = function(.x) y.boxcox[.x,])
library(gbm)
start_up %<>% mutate(varnames = rep(list(c('reanalysis_relative_humidity_percent','reanalysis_precip_amt_kg_per_m2','reanalysis_max_air_temp_k',"ndvi_ne","ndvi_nw","ndvi_se","ndvi_sw",'y')),5)) %>%
mutate(lags = rep(list(c(8,8,4,4,4,4,4,1)),5))
model_list <- list(Mdl = dynfit)
ModelFrame <- enframe(rep(model_list,5),name = 'modelname',value = 'model')
ModelResults <- start_up %>% select(-1,-3) %>%
`colnames<-`(c('x','y','varnames','lags')) %>%
mutate(params = pmap(.,function(x,y,varnames,lags){
list(x = x, y = y, varnames = varnames, lags = lags)
}))
ModelResults %<>% bind_cols(.,ModelFrame) %>%
mutate(mdlResult = invoke_map(model,params))
paste0('dyn$lm(total_cases ~',paste0('stats::lag(',varnames,',',-lags,')',collapse = '+'),',data = sample)')
dyn$lm(total_cases ~stats::lag(reanalysis_relative_humidity_percent,-8)+stats::lag(reanalysis_precip_amt_kg_per_m2,-8)+stats::lag(reanalysis_max_air_temp_k,-4)+stats::lag(ndvi_ne,-4)+stats::lag(ndvi_nw,-4)+stats::lag(ndvi_se,-4)+stats::lag(ndvi_sw,-4)+stats::lag(y,-1),data = sample)
varnames
varnames[8] <- "total_cases"
dyn$lm(total_cases ~stats::lag(reanalysis_relative_humidity_percent,-8)+stats::lag(reanalysis_precip_amt_kg_per_m2,-8)+stats::lag(reanalysis_max_air_temp_k,-4)+stats::lag(ndvi_ne,-4)+stats::lag(ndvi_nw,-4)+stats::lag(ndvi_se,-4)+stats::lag(ndvi_sw,-4)+stats::lag(y,-1),data = sample)
paste0('dyn$lm(total_cases ~',paste0('stats::lag(',varnames,',',-lags,')',collapse = '+'),',data = sample)')
dyn$lm(total_cases ~stats::lag(reanalysis_relative_humidity_percent,-8)+stats::lag(reanalysis_precip_amt_kg_per_m2,-8)+stats::lag(reanalysis_max_air_temp_k,-4)+stats::lag(ndvi_ne,-4)+stats::lag(ndvi_nw,-4)+stats::lag(ndvi_se,-4)+stats::lag(ndvi_sw,-4)+stats::lag(total_cases,-1),data = sample)
summary(dyn$lm(total_cases ~stats::lag(reanalysis_relative_humidity_percent,-8)+stats::lag(reanalysis_precip_amt_kg_per_m2,-8)+stats::lag(reanalysis_max_air_temp_k,-4)+stats::lag(ndvi_ne,-4)+stats::lag(ndvi_nw,-4)+stats::lag(ndvi_se,-4)+stats::lag(ndvi_sw,-4)+stats::lag(total_cases,-1),data = sample))
stats::lag(y$total_cases,-1)
stats::lag(y$total_cases,1)
cbind(y$total_cases,stats::lag(y$total_cases,-1), stats::lag(y$total_cases,1))
start_up
tz <- zoo(cbind(Y = 0, x = rnorm(10), z = rnorm(10)))
for(i in 2:10) {
tz$Y[i] <- with(as.data.frame(tz),
2*Y[i-1] + 3*z[i] +4* x[i] + 5*x[i-1] + rnorm(1))
}
tz
tz.orig <- tz
L <- function(x, k = 1) stats::lag(x, -k)
i = 7
fit <- dyn$lm(Y ~ L(Y) + z + L(x, 0:1), tz, subset = seq_len(i-1))
summary(fit)
iris
dat <- head(iris)
dat
stats::lag(dat$Sepal.Length,-1)
cbind(dat$Depal.Length,stats::lag(dat$Sepal.Length,-1))
cbind(dat$Sepal.Length,stats::lag(dat$Sepal.Length,-1))
cbind(dat$Sepal.Length,stats::lag(dat$Sepal.Length,1))
stats::lag(dat$Sepal.Length, -1)
stats::lag(dat$Sepal.Length, 1)
stats::lag(dat$Sepal.Length,-1)
stats::lag(y$total_cases,-1)
stats::lag(y$total_cases,1)
for(i in 7:10) {
# fit based on first i-1 values
fit <- dyn$lm(Y ~ L(Y) + z + L(x, 0:1), tz, subset = seq_len(i-1))
# get prediction for ith value
tz[i, "Y"] <- tail(predict(fit, tz[1:i,]), 1)
}
cbind(pred = tz[7:10, "Y"], act = tz.orig[7:10, "Y"])
start_up
ModelResults <- start_up %>% select(-1,-3) %>%
`colnames<-`(c('x','y','varnames','lags')) %>%
mutate(params = pmap(.,function(x,y,varnames,lags){
list(x = x, y = y, varnames = varnames, lags = lags)
}))
ModelResults
ModelResults %<>% bind_cols(.,ModelFrame) %>%
mutate(mdlResult = invoke_map(model,params))
x
head(y)
# list2env(data.frame(cbind(x,y)),.GlobalEnv)
# lmdl <- eval(parse(text = paste0('lm(y ~',paste0('stats::lag(',varnames,',',-lags,')',collapse = '+'),',data = zooreg(cbind(x,y)))')))
sample <- data.frame(cbind(x,y))
head(sample)
class(sample)
paste0('dyn$lm(total_cases ~',paste0('stats::lag(',varnames,',',-lags,')',collapse = '+'),',data = sample)')
dyn$lm(total_cases ~stats::lag(reanalysis_relative_humidity_percent,-8)+stats::lag(reanalysis_precip_amt_kg_per_m2,-8)+stats::lag(reanalysis_max_air_temp_k,-4)+stats::lag(ndvi_ne,-4)+stats::lag(ndvi_nw,-4)+stats::lag(ndvi_se,-4)+stats::lag(ndvi_sw,-4)+stats::lag(total_cases,-1),data = sample)
varnames
ModelFrame <- enframe(rep(model_list,5),name = 'modelname',value = 'model')
ModelResults <- start_up %>% select(-1,-3) %>%
`colnames<-`(c('x','y','varnames','lags')) %>%
mutate(params = pmap(.,function(x,y,varnames,lags){
list(x = x, y = y, varnames = varnames, lags = lags)
}))
ModelResults %<>% bind_cols(.,ModelFrame) %>%
mutate(mdlResult = invoke_map(model,params))
ModelResults$mdlResult[[1]]
start_up %<>% mutate(varnames = rep(list(c('reanalysis_relative_humidity_percent','reanalysis_precip_amt_kg_per_m2','reanalysis_max_air_temp_k',"ndvi_ne","ndvi_nw","ndvi_se","ndvi_sw",'total_cases')),5)) %>%
mutate(lags = rep(list(c(8,8,4,4,4,4,4,1)),5))
model_list <- list(Mdl = dynfit)
ModelFrame <- enframe(rep(model_list,5),name = 'modelname',value = 'model')
ModelResults <- start_up %>% select(-1,-3) %>%
`colnames<-`(c('x','y','varnames','lags')) %>%
mutate(params = pmap(.,function(x,y,varnames,lags){
list(x = x, y = y, varnames = varnames, lags = lags)
}))
ModelResults %<>% bind_cols(.,ModelFrame) %>%
mutate(mdlResult = invoke_map(model,params))
c
ModelResults$mdlResult[[1]]
LinerFitResults <- ModelResults %>% map(.x = .$mdlResult, .f = ~glance(.x))
LinerFitResults
stats::lag(y$total_cases,-1)
head(trainImputedSj)
class(y)
head(y$total_cases)
head(stats::lag(y$total_cases,-1))
head(stats::lag(y$total_cases,1))
ts.y <- ts(head(y$total_cases))
ts.y
stats::lag(ts.y,-1)
dplyr::lag(head(y$total_cases))
dplyr::lag(head(y))
paste0('dyn$lm(total_cases ~',paste0('L(',varnames,',',-lags,')',collapse = '+'),',data = sample)')
L <- function(var,lags = 1) {
browser()
dplyr::lag(var,k=lags)
}
varnames
source('~/Documents/MSPA/PREDICT 413/DengAI/dynfit.R')
knitr::opts_chunk$set(echo = F, warning = F, message = F)
library(magrittr)
library(tidyverse)
library(skimr)
library(forecast)
library(lubridate)
library(xts)
library(astsa)
library(caret)
library(dplyr)
train <- read_csv("Training.csv")
test <- read_csv("DengAI_Predicting_Disease_Spread_-_Test_Data_Features.csv")
skim_with(numeric= list(hist= NULL),integer = list(hist = NULL))
pander::pander(skim(train))
# Show missing values
Amelia::missmap(train,y.cex = 0.5,x.cex = 0.5)
# Split data by city
trainSJ <- train %>% dplyr::filter(city == "sj")
trainIQ <- train %>% dplyr::filter(city == "iq")
trainImputedSj <- VIM::kNN(trainSJ[, -5])
trainImputedIq <- VIM::kNN(trainIQ[, -5])
trainImputedSj %<>% mutate(week_start_date = lubridate::mdy(week_start_date),
total_cases = trainSJ$total_cases)
trainImputedIq %<>% mutate(week_start_date = lubridate::mdy(week_start_date),
total_cases = trainIQ$total_cases)
par(mfrow = c(2,1))
tsplot(trainImputedSj$total_cases~trainImputedSj$week_start_date, main = "Dengue reported cases in San Juan", ylab = "Total cases")
tsplot(trainImputedIq$total_cases~trainImputedIq$week_start_date, main = "Dengue reported cases in Iquitos", ylab = "Total cases")
plot(trainImputedSj$ndvi_ne~trainImputedSj$week_start_date, col = ifelse(trainImputedSj$ndvi_ne_imp == T,"red", "black"),type = "b")
plot(trainImputedIq$ndvi_ne~trainImputedIq$week_start_date, col = ifelse(trainImputedIq$ndvi_ne_imp == T,"red", "black"), type = "b")
plot(trainImputedSj$ndvi_nw~trainImputedSj$week_start_date, col = ifelse(trainImputedSj$ndvi_nw_imp == T,"red", "black"),type = "b")
plot(trainImputedIq$ndvi_nw~trainImputedIq$week_start_date, col = ifelse(trainImputedIq$ndvi_nw_imp == T,"red", "black"), type = "b")
plot(trainImputedSj$station_avg_temp_c~trainImputedSj$week_start_date, col = ifelse(trainImputedSj$station_avg_temp_c_imp == T,"red", "black"),type = "b")
plot(trainImputedIq$station_avg_temp_c~trainImputedIq$week_start_date, col = ifelse(trainImputedIq$station_avg_temp_c_imp == T,"red", "black"),type = "b",lty = 1,lwd = 0.5, cex = 0.5)
cormatSj <-  trainImputedSj %>%
select_if(is.numeric) %>%
cor(.)
corrplot::corrplot(cormatSj,method = 'ellipse',tl.cex = 0.6,order = "hclust")
cormatIq <- trainImputedIq %>%
select_if(is.numeric) %>% cor(.)
corrplot::corrplot(cormatIq, method = 'ellipse',tl.cex = 0.6, order = 'hclust')
HighCorIq <- findCorrelation(cormatIq, names = T)
HighCorSj <- findCorrelation(cormatSj, names = T)
tsTotalcasesSj <- ts(trainImputedSj$total_cases, start = c(1990,18), frequency = 52)
ggseasonplot(tsTotalcasesSj)
ggseasonplot(ts(trainImputedSj$reanalysis_relative_humidity_percent,start = c(1990,18), frequency = 52)) + theme_classic() +theme(legend.position = "none",plot.title = element_text(hjust = 0.5),axis.text.x = element_text(size = 5)) + ggtitle("Reanalysis_relative_humidity_%")
ggseasonplot(ts(trainImputedSj$reanalysis_max_air_temp_k, start = c(1990,18), frequency = 52)) +  theme_classic() + theme(legend.position = "none",plot.title = element_text(hjust = 0.5),axis.text.x = element_text(size = 5)) + ggtitle("Reanalysis_max_air_temp_K")
# Remove highCor variables
trainImputedSj %<>%
select(-city,-Year.Week) %>%
select(-one_of(!!HighCorSj)) %>%
select(-ends_with("imp"))
# make data a time series object
tsTrainImputedSj <-  xts::xts(trainImputedSj[,-1:-3],order.by = trainImputedSj$week_start_date, frequency = 52)
#ccf2(trainImputedSj$total_cases,trainImputedSj$reanalysis_specific_humidity_g_per_kg,max.lag = 15)
library(forecast)
library(astsa)
library(dyn)
library(caret)
library(tidyr)
library(caret)
library(purrr)
library(dplyr)
source('~/Documents/MSPA/PREDICT 413/DengAI/generateLaggedPredictors.R')
source('~/Documents/MSPA/PREDICT 413/DengAI/LinearFit.R')
source('~/Documents/MSPA/PREDICT 413/DengAI/RetrievePredictors.R')
source('~/Documents/MSPA/PREDICT 413/DengAI/dynfit.R')
# 1. As is
#----------------------------------------
y <- tsTrainImputedSj$total_cases # Expecting this to be a zoo object
lambda <- forecast::BoxCox.lambda(y)
y.boxcox <- forecast::BoxCox(y,lambda)
plot(y.boxcox)
hist(y.boxcox)
# acf2(y) # Notice the autocorrelation
y.diff <- diff(y)
acf2(y.boxcox)
y.boxcox.diff <- diff(y.boxcox)
#----------------------------------------
#     Model Matrix
#---------------------------------------
x.train <- model.matrix(total_cases ~ ., data = tsTrainImputedSj)[,-1]
x.train <- zoo(x.train,order.by = time(y))
inputlist <- data.frame(starts = c(1,52*3, 52*6, 52*9,52*12),
ends = c(52*6, 9*52, 12*52, 52*15,52*18))
windowdraw <- function(starts,ends,data = index(x.train)){
window(data,start = starts, end = ends)
}
start_up <- pmap(inputlist,windowdraw) %>% tibble(.)
start_up$Pred = pmap(start_up,.f = function(.x) x.train[.x,])
start_up$y <- map(start_up$.,.f = function(.x) y[.x,])
start_up$yBoxCox <- map(start_up$.,.f = function(.x) y.boxcox[.x,])
start_up %<>% mutate(varnames = rep(list(c('reanalysis_relative_humidity_percent','reanalysis_precip_amt_kg_per_m2','reanalysis_max_air_temp_k',"ndvi_ne","ndvi_nw","ndvi_se","ndvi_sw",'total_cases')),5)) %>%
mutate(lags = rep(list(c(8,8,4,4,4,4,4,1)),5))
model_list <- list(Mdl = dynfit)
ModelFrame <- enframe(rep(model_list,5),name = 'modelname',value = 'model')
ModelResults <- start_up %>% select(-1,-3) %>%
`colnames<-`(c('x','y','varnames','lags')) %>%
mutate(params = pmap(.,function(x,y,varnames,lags){
list(x = x, y = y, varnames = varnames, lags = lags)
}))
ModelResults %<>% bind_cols(.,ModelFrame) %>%
mutate(mdlResult = invoke_map(model,params))
aste0('dyn$lm(total_cases ~',paste0('L(',varnames,',',-lags,')',collapse = '+'),',data = sample)')
paste0('dyn$lm(total_cases ~',paste0('L(',varnames,',',-lags,')',collapse = '+'),',data = sample)')
source('~/Documents/MSPA/PREDICT 413/DengAI/dynfit.R')
source('~/Documents/MSPA/PREDICT 413/DengAI/dynfit.R')
ModelResults %<>% bind_cols(.,ModelFrame) %>%
mutate(mdlResult = invoke_map(model,params))
paste0('dyn$lm(total_cases ~',paste0('L(',varnames,',',-lags,')',collapse = '+'),',data = sample)')
source('~/Documents/MSPA/PREDICT 413/DengAI/dynfit.R')
ModelFrame <- enframe(rep(model_list,5),name = 'modelname',value = 'model')
ModelResults <- start_up %>% select(-1,-3) %>%
`colnames<-`(c('x','y','varnames','lags')) %>%
mutate(params = pmap(.,function(x,y,varnames,lags){
list(x = x, y = y, varnames = varnames, lags = lags)
}))
ModelResults %<>% bind_cols(.,ModelFrame) %>%
mutate(mdlResult = invoke_map(model,params))
start_up <- pmap(inputlist,windowdraw) %>% tibble(.)
start_up$Pred = pmap(start_up,.f = function(.x) x.train[.x,])
start_up$y <- map(start_up$.,.f = function(.x) y[.x,])
start_up$yBoxCox <- map(start_up$.,.f = function(.x) y.boxcox[.x,])
start_up %<>% mutate(varnames = rep(list(c('reanalysis_relative_humidity_percent','reanalysis_precip_amt_kg_per_m2','reanalysis_max_air_temp_k',"ndvi_ne","ndvi_nw","ndvi_se","ndvi_sw",'total_cases')),5)) %>%
mutate(lags = rep(list(c(8,8,4,4,4,4,4,1)),5))
model_list <- list(Mdl = dynfit)
ModelFrame <- enframe(rep(model_list,5),name = 'modelname',value = 'model')
ModelResults <- start_up %>% select(-1,-3) %>%
`colnames<-`(c('x','y','varnames','lags')) %>%
mutate(params = pmap(.,function(x,y,varnames,lags){
list(x = x, y = y, varnames = varnames, lags = lags)
}))
ModelResults %<>% bind_cols(.,ModelFrame) %>%
mutate(mdlResult = invoke_map(model,params))
lmdl
summary(lmdl)
source('~/Documents/MSPA/PREDICT 413/DengAI/dynfit.R')
model_list <- list(Mdl = dynfit)
ModelFrame <- enframe(rep(model_list,5),name = 'modelname',value = 'model')
ModelResults <- start_up %>% select(-1,-3) %>%
`colnames<-`(c('x','y','varnames','lags')) %>%
mutate(params = pmap(.,function(x,y,varnames,lags){
list(x = x, y = y, varnames = varnames, lags = lags)
}))
ModelResults %<>% bind_cols(.,ModelFrame) %>%
mutate(mdlResult = invoke_map(model,params))
LinerFitResults <- ModelResults %>% map(.x = .$mdlResult, .f = ~glance(.x))
LinerFitResults
fct <- MakePredictions(x.train,y.boxcox,currentTime = 312,model = ModelResults$mdlResult[[1]],420)
getnewdata <-  function(x,y,currentTime){
start <- time(head(x,1))
end <- currentTime + 1
newdata = zooreg(cbind(x = x[1:end,], y = y[1:end,]),order.by = time(y[1:313,]))
#newdata = zooreg(cbind(x = window(x,start = start, end = end),y = window(y,start = start, end = end)), start = start, end = end )
#list2env(data.frame(newdata),.GlobalEnv)
return(newdata)
}
statrtTime <- as.Date('1990-04-30')
currentTime <- as.Date('1996-04-29')
oneaheadForecast <- function (x,y,currentTime,model){
newdata <- getnewdata(x,y,currentTime)
prediction <- predict(model,newdata)
tail(prediction$mean,1)
}
MakePredictions <- function(x, y, currentTime, model, until) {
browser()
# predictions <-window(y, start = '1990-04-30', end = currentTime)
# predictions <- rbind.zoo(coredata(predictions), rep(NA,ceiling(difftime(strptime(until,"%Y-%m-%d"),strptime(currentTime + 1, "%Y-%m-%d"),units ='weeks'))))
#predictions <- zoo(predictions,order.by = time(window(x,start = '1990-04-30', end = until)))
#startindex = which(index(y)==currentTime) + 1
future = currentTime + 1
y[future : nrow(y),] <- NA
while (future <= until) {
oneaheadPred <- oneaheadForecast(x,y, currentTime, model)
currentTime <- currentTime + 1
y[currentTime,1] <- oneaheadPred
}
return(predictions)
}
fct <- MakePredictions(x.train,y.boxcox,currentTime = 312,model = ModelResults$mdlResult[[1]],420)
newdata
tail(newdata)
model
tail(prediction)
tail(model$fitted.values)
tail(prediction$mean)
tail(y)
y[312:313]
y[312:313]
getnewdata <-  function(x,y,currentTime){
start <- time(head(x,1))
end <- currentTime + 1
newdata = zooreg(cbind(x = x[1:end,], y = y[1:end,]),order.by = time(y[1:end,]))
#newdata = zooreg(cbind(x = window(x,start = start, end = end),y = window(y,start = start, end = end)), start = start, end = end )
#list2env(data.frame(newdata),.GlobalEnv)
return(newdata)
}
fct <- MakePredictions(x.train,y.boxcox,currentTime = 312,model = ModelResults$mdlResult[[1]],420)
y[312:313]
y[312:314]
y[312:315]
MakePredictions <- function(x, y, currentTime, model, until) {
browser()
# predictions <-window(y, start = '1990-04-30', end = currentTime)
# predictions <- rbind.zoo(coredata(predictions), rep(NA,ceiling(difftime(strptime(until,"%Y-%m-%d"),strptime(currentTime + 1, "%Y-%m-%d"),units ='weeks'))))
#predictions <- zoo(predictions,order.by = time(window(x,start = '1990-04-30', end = until)))
#startindex = which(index(y)==currentTime) + 1
future = currentTime + 1
y[future : nrow(y),] <- NA
while (future <= until) {
oneaheadPred <- oneaheadForecast(x,y, future, model)
future <- currentTime + 1
y[future,1] <- oneaheadPred
}
return(predictions)
}
fct <- MakePredictions(x.train,y.boxcox,currentTime = 312,model = ModelResults$mdlResult[[1]],420)
fct
load("~/Documents/MSPA/PREDICT 413/DengAI/.RData")
plot(y.boxcox)
library(forecast)
library(astsa)
library(dyn)
library(caret)
library(tidyr)
library(caret)
library(purrr)
library(dplyr)
source('generateLaggedPredictors.R')
source('LinearFit.R')
source('RetrievePredictors.R')
source('dynfit.R')
library(magrittr)
library(tidyverse)
library(skimr)
library(forecast)
library(lubridate)
library(xts)
library(astsa)
library(caret)
library(dplyr)
plot(y.boxcox)
plot(y.boxcox,grid.ticks.on = F)
plot(tsTrainImputedSj$total_cases)
plot(tsTrainImputedSj$total_cases,grid.ticks.on = F)
plot(y.boxcox,grid.ticks.on = F)
plot(tsTrainImputedSj$total_cases,grid.ticks.on = F)
lines(y.boxcox,grid.ticks.on = F, color = 'red', lwd = 2)
par(mfrow = c(2,1))
plot(tsTrainImputedSj$total_cases,grid.ticks.on = F)
lines(y.boxcox,grid.ticks.on = F)
par(mfrow = c(2,1))
plot(tsTrainImputedSj$total_cases,grid.ticks.on = F)
lines(y.boxcox,grid.ticks.on = F)
par(mfrow = c(2,1))
plot(tsTrainImputedSj$total_cases,grid.ticks.on = F)
plot(y.boxcox,grid.ticks.on = F)
summaryMAE
knitr::kable(summaryMAE)
pandoc::pander(summaryMAE)
pander::pander(summaryMAE)
pander::pander(summaryMAE)
View(tsTrainImputedSj)
plot(tsTrainImputedSj$total_cases,grid.ticks.on = F)
load("~/Documents/MSPA/PREDICT 413/DengAI/.RData")
par(mfrow = c(2,1))
plot(tsTrainImputedSj$total_cases,grid.ticks.on = F)
plot(y.boxcox,grid.ticks.on = F)
knitr::opts_chunk$set(echo = FALSE)
plot(y.boxcox[623:936,1],grid.ticks.on = F, main = "BoxCox Transformed total cases forecast by KNN on hold out set")
lines(xts(fctknnTuned,order.by = time(y.boxcox[624:936,1])),col = 'red')
addLegend(legend.loc = "topleft", legend.names = c('BoxCox Total_Cases','KNN forecast'),col = c('black','red'),lty = 1)
plot(y.boxcox[623:936,1],grid.ticks.on = F, main = "BoxCox Transformed total cases forecast by KNN on hold out set",
addLegend(legend.loc = "topleft", legend.names = c('BoxCox Total_Cases','KNN forecast'),col = c('black','red'),lty = 1))
lines(xts(fctknnTuned,order.by = time(y.boxcox[624:936,1])),col = 'red')
plot(y.boxcox[623:936,1],grid.ticks.on = F, main = "BoxCox Transformed total cases forecast by KNN on hold out set")
lines(xts(fctknnTuned,order.by = time(y.boxcox[624:936,1])),col = 'red')
addLegend(legend.loc = "topleft", legend.names = c('BoxCox Total_Cases','KNN forecast'),col = c('black','red'),lty = 1)
knitr::opts_chunk$set(echo = FALSE)
load("~/Documents/MSPA/PREDICT 413/DengAI/.RData")
plot(y,grid.ticks.on = F)
knitr::opts_chunk$set(echo = FALSE)
load("~/Documents/MSPA/PREDICT 413/DengAI/.RData")
library(xts)
autoplot(y.boxcox[623:936,1],grid.ticks.on = F, main = "BoxCox Transformed total cases forecast by KNN on hold out set")
lines(xts(fctknnTuned,order.by = time(y.boxcox[624:936,1])),col = 'red')
addLegend(legend.loc = "topleft", legend.names = c('BoxCox Total_Cases','KNN forecast'),col = c('black','red'),lty = 1)
autoplot(y.boxcox[623:936,1],grid.ticks.on = F, main = "BoxCox Transformed total cases forecast by KNN on hold out set") +
geom_lines(xts(fctknnTuned,order.by = time(y.boxcox[624:936,1])),col = 'red')
autoplot(y.boxcox[623:936,1],grid.ticks.on = F, main = "BoxCox Transformed total cases forecast by KNN on hold out set") +
geom_line(xts(fctknnTuned,order.by = time(y.boxcox[624:936,1])),col = 'red')
autoplot(y.boxcox[623:936,1],grid.ticks.on = F, main = "BoxCox Transformed total cases forecast by KNN on hold out set") +
lines(xts(fctknnTuned,order.by = time(y.boxcox[624:936,1])),col = 'red')
autoplot(y.boxcox[623:936,1],grid.ticks.on = F, main = "BoxCox Transformed total cases forecast by KNN on hold out set")
lines(xts(fctknnTuned,order.by = time(y.boxcox[624:936,1])),col = 'red')
# addLegend(legend.loc = "topleft", legend.names = c('BoxCox Total_Cases','KNN forecast'),col = c('black','red'),lty = 1)
plot(y.boxcox[623:936,1],grid.ticks.on = F, main = "BoxCox Transformed total cases forecast by KNN on hold out set")
lines(xts(fctknnTuned,order.by = time(y.boxcox[624:936,1])),col = 'red')
# addLegend(legend.loc = "topleft", legend.names = c('BoxCox Total_Cases','KNN forecast'),col = c('black','red'),lty = 1)
plot(y.boxcox[623:936,1],grid.ticks.on = F, main = "BoxCox Transformed total cases forecast by KNN on hold out set")
lines(xts(fctknnTuned,order.by = time(y.boxcox[624:936,1])),col = 'red')
addLegend(legend.loc = "topleft", legend.names = c('BoxCox Total_Cases','KNN forecast'),col = c('black','red'),lty = 1)
pp<- plot(y.boxcox[623:936,1],grid.ticks.on = F, main = "BoxCox Transformed total cases forecast by KNN on hold out set")
pp<- lines(xts(fctknnTuned,order.by = time(y.boxcox[624:936,1])),col = 'red')
pp<- addLegend(legend.loc = "topleft", legend.names = c('BoxCox Total_Cases','KNN forecast'),col = c('black','red'),lty = 1)
pp
pp<- plot(y.boxcox[623:936,1],grid.ticks.on = F, main = "BoxCox Transformed total cases forecast by KNN on hold out set")
pp<- lines(xts(fctknnTuned,order.by = time(y.boxcox[624:936,1])),col = 'red')
pp<- addLegend(legend.loc = "topleft", legend.names = c('BoxCox Total_Cases','KNN forecast'),col = c('black','red'),lty = 1)
pp
selectionmdl
